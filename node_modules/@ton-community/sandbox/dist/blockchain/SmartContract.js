"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SmartContract_account, _SmartContract_verbosity;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartContract = exports.createEmptyShardAccount = exports.createShardAccount = void 0;
const ton_core_1 = require("ton-core");
const selector_1 = require("../utils/selector");
function createShardAccount(args) {
    let wc = args.workchain ?? 0;
    let address = args.address ?? (0, ton_core_1.contractAddress)(wc, { code: args.code, data: args.data });
    let balance = args.balance ?? 0n;
    return {
        account: {
            addr: address,
            storage: {
                lastTransLt: 0n,
                balance: { coins: balance },
                state: {
                    type: 'active',
                    state: {
                        code: args.code,
                        data: args.data
                    }
                }
            },
            storageStats: {
                used: {
                    cells: 0n,
                    bits: 0n,
                    publicCells: 0n
                },
                lastPaid: 0,
                duePayment: null
            }
        },
        lastTransactionLt: 0n,
        lastTransactionHash: 0n
    };
}
exports.createShardAccount = createShardAccount;
function createEmptyAccount(address) {
    return {
        addr: address,
        storage: {
            lastTransLt: 0n,
            balance: { coins: 0n },
            state: { type: 'uninit' }
        },
        storageStats: {
            used: { cells: 0n, bits: 0n, publicCells: 0n },
            lastPaid: 0,
        }
    };
}
function createEmptyShardAccount(address) {
    return {
        account: createEmptyAccount(address),
        lastTransactionLt: 0n,
        lastTransactionHash: 0n
    };
}
exports.createEmptyShardAccount = createEmptyShardAccount;
const verbosityToExecutorVerbosity = {
    'none': 'short',
    'vm_logs': 'full',
    'vm_logs_full': 'full_location_stack',
};
class SmartContract {
    constructor(shardAccount, blockchain) {
        _SmartContract_account.set(this, void 0);
        _SmartContract_verbosity.set(this, void 0);
        this.address = shardAccount.account.addr;
        __classPrivateFieldSet(this, _SmartContract_account, shardAccount, "f");
        this.blockchain = blockchain;
    }
    get balance() {
        return __classPrivateFieldGet(this, _SmartContract_account, "f").account?.storage.balance.coins ?? 0n;
    }
    set balance(v) {
        if (!__classPrivateFieldGet(this, _SmartContract_account, "f").account) {
            __classPrivateFieldGet(this, _SmartContract_account, "f").account = createEmptyAccount(this.address);
        }
        __classPrivateFieldGet(this, _SmartContract_account, "f").account.storage.balance.coins = v;
    }
    get lastTransactionHash() {
        return __classPrivateFieldGet(this, _SmartContract_account, "f").lastTransactionHash;
    }
    get lastTransactionLt() {
        return __classPrivateFieldGet(this, _SmartContract_account, "f").lastTransactionLt;
    }
    get accountState() {
        return __classPrivateFieldGet(this, _SmartContract_account, "f").account?.storage.state;
    }
    get account() {
        return __classPrivateFieldGet(this, _SmartContract_account, "f");
    }
    set account(account) {
        __classPrivateFieldSet(this, _SmartContract_account, account, "f");
    }
    static create(blockchain, args) {
        return new SmartContract(createShardAccount(args), blockchain);
    }
    static empty(blockchain, address) {
        return new SmartContract(createEmptyShardAccount(address), blockchain);
    }
    receiveMessage(message) {
        const messageCell = (0, ton_core_1.beginCell)().store((0, ton_core_1.storeMessage)(message)).endCell();
        const shardAccount = (0, ton_core_1.beginCell)().store((0, ton_core_1.storeShardAccount)(__classPrivateFieldGet(this, _SmartContract_account, "f"))).endCell();
        const res = this.blockchain.executor.runTransaction({
            config: this.blockchain.config,
            libs: null,
            verbosity: verbosityToExecutorVerbosity[this.verbosity.vmLogs],
            shardAccount,
            message: messageCell,
            now: Math.floor(Date.now() / 1000),
            lt: this.blockchain.lt,
            randomSeed: Buffer.alloc(32)
        });
        if (this.verbosity.blockchainLogs && res.logs.length > 0) {
            console.log(res.logs);
        }
        if (!res.result.success) {
            console.error('Error:', res.result.error, 'VM logs', res.result.vmResults);
            throw new Error('Error executing transaction');
        }
        if (this.verbosity.vmLogs !== 'none' && res.result.vmLog.length > 0) {
            console.log(res.result.vmLog);
        }
        if (this.verbosity.debugLogs && res.debugLogs.length > 0) {
            console.log(res.debugLogs);
        }
        __classPrivateFieldSet(this, _SmartContract_account, (0, ton_core_1.loadShardAccount)(ton_core_1.Cell.fromBase64(res.result.shardAccount).beginParse()), "f");
        return (0, ton_core_1.loadTransaction)(ton_core_1.Cell.fromBase64(res.result.transaction).beginParse());
    }
    get(method, stack = []) {
        if (__classPrivateFieldGet(this, _SmartContract_account, "f").account?.storage.state.type !== 'active') {
            throw new Error('Trying to run get method on non-active contract');
        }
        const res = this.blockchain.executor.runGetMethod({
            code: __classPrivateFieldGet(this, _SmartContract_account, "f").account?.storage.state.state.code,
            data: __classPrivateFieldGet(this, _SmartContract_account, "f").account?.storage.state.state.data,
            methodId: typeof method === 'string' ? (0, selector_1.getSelectorForMethod)(method) : method,
            stack,
            config: this.blockchain.config,
            verbosity: verbosityToExecutorVerbosity[this.verbosity.vmLogs],
            libs: undefined,
            address: this.address,
            unixTime: Math.floor(Date.now() / 1000),
            balance: this.balance,
            randomSeed: Buffer.alloc(32),
            gasLimit: 10000000n
        });
        if (this.verbosity.blockchainLogs && res.logs.length > 0) {
            console.log(res.logs);
        }
        if (!res.output.success) {
            throw new Error('Error invoking get method: ' + res.output.error);
        }
        if (this.verbosity.vmLogs !== 'none' && res.output.vm_log.length > 0) {
            console.log(res.output.vm_log);
        }
        if (this.verbosity.debugLogs && res.debugLogs.length > 0) {
            console.log(res.debugLogs);
        }
        const resStack = (0, ton_core_1.parseTuple)(ton_core_1.Cell.fromBase64(res.output.stack));
        return {
            stack: resStack,
            stackReader: new ton_core_1.TupleReader(resStack),
            exitCode: res.output.vm_exit_code,
            gasUsed: res.output.gas_used,
            logs: res.output.vm_log
        };
    }
    get verbosity() {
        return {
            ...this.blockchain.verbosity,
            ...__classPrivateFieldGet(this, _SmartContract_verbosity, "f"),
        };
    }
    set verbosity(value) {
        this.setVerbosity(value);
    }
    setVerbosity(verbosity) {
        if (typeof verbosity === 'string') {
            __classPrivateFieldSet(this, _SmartContract_verbosity, {
                ...__classPrivateFieldGet(this, _SmartContract_verbosity, "f"),
                vmLogs: verbosity,
                blockchainLogs: verbosity !== 'none',
            }, "f");
        }
        else {
            __classPrivateFieldSet(this, _SmartContract_verbosity, verbosity, "f");
        }
    }
}
exports.SmartContract = SmartContract;
_SmartContract_account = new WeakMap(), _SmartContract_verbosity = new WeakMap();
