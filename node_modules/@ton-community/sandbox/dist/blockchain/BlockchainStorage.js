"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteBlockchainStorage = exports.LocalBlockchainStorage = void 0;
const ton_core_1 = require("ton-core");
const SmartContract_1 = require("./SmartContract");
class LocalBlockchainStorage {
    constructor() {
        this.contracts = new Map();
    }
    async getContract(blockchain, address) {
        let existing = this.contracts.get(address.toString());
        if (!existing) {
            existing = SmartContract_1.SmartContract.empty(blockchain, address);
            this.contracts.set(address.toString(), existing);
        }
        return existing;
    }
}
exports.LocalBlockchainStorage = LocalBlockchainStorage;
class RemoteBlockchainStorage {
    constructor(client) {
        this.contracts = new Map();
        this.client = client;
    }
    async getContract(blockchain, address) {
        let existing = this.contracts.get(address.toString());
        if (!existing) {
            let lastBlock = await this.client.getLastBlock();
            let account = await this.client.getAccount(lastBlock.last.seqno, address);
            if (account.account.state.type !== 'active') {
                existing = SmartContract_1.SmartContract.empty(blockchain, address);
            }
            else {
                existing = SmartContract_1.SmartContract.create(blockchain, {
                    address: address,
                    data: ton_core_1.Cell.fromBase64(account.account.state.data),
                    code: ton_core_1.Cell.fromBase64(account.account.state.code),
                    balance: BigInt(account.account.balance.coins)
                });
            }
            this.contracts.set(address.toString(), existing);
        }
        return existing;
    }
}
exports.RemoteBlockchainStorage = RemoteBlockchainStorage;
