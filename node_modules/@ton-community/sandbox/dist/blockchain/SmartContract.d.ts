import { Blockchain } from "./Blockchain";
import { Address, Cell, Message, ShardAccount, TupleItem, TupleReader } from "ton-core";
export declare function createShardAccount(args: {
    address?: Address;
    code: Cell;
    data: Cell;
    balance: bigint;
    workchain?: number;
}): ShardAccount;
export declare function createEmptyShardAccount(address: Address): ShardAccount;
export type Verbosity = 'none' | 'vm_logs' | 'vm_logs_full';
export type LogsVerbosity = {
    blockchainLogs: boolean;
    vmLogs: Verbosity;
    debugLogs: boolean;
};
export declare class SmartContract {
    #private;
    readonly address: Address;
    readonly blockchain: Blockchain;
    constructor(shardAccount: ShardAccount, blockchain: Blockchain);
    get balance(): bigint;
    set balance(v: bigint);
    get lastTransactionHash(): bigint;
    get lastTransactionLt(): bigint;
    get accountState(): import("ton-core").AccountState | undefined;
    get account(): ShardAccount;
    set account(account: ShardAccount);
    static create(blockchain: Blockchain, args: {
        address: Address;
        code: Cell;
        data: Cell;
        balance: bigint;
    }): SmartContract;
    static empty(blockchain: Blockchain, address: Address): SmartContract;
    receiveMessage(message: Message): {
        address: bigint;
        lt: bigint;
        prevTransactionHash: bigint;
        prevTransactionLt: bigint;
        now: number;
        outMessagesCount: number;
        oldStatus: import("ton-core").AccountStatus;
        endStatus: import("ton-core").AccountStatus;
        inMessage: Message | undefined;
        outMessages: import("ton-core").Dictionary<number, Message>;
        totalFees: import("ton-core").CurrencyCollection;
        stateUpdate: import("ton-core").HashUpdate;
        description: import("ton-core").TransactionDescription;
    };
    get(method: string | number, stack?: TupleItem[]): {
        stack: TupleItem[];
        stackReader: TupleReader;
        exitCode: number;
        gasUsed: string;
        logs: string;
    };
    get verbosity(): LogsVerbosity;
    set verbosity(value: LogsVerbosity);
    setVerbosity(verbosity: Partial<LogsVerbosity> | Verbosity | undefined): void;
}
